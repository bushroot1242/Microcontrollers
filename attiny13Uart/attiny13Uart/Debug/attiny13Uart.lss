
attiny13Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000144  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000558  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000449  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d7  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000067  00000000  00000000  0000122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	02 d0       	rcall	.+4      	; 0x32 <main>
  2e:	4e c0       	rjmp	.+156    	; 0xcc <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <main>:
#include "main.h"

int main(void)
{
	uart_init();
  32:	12 d0       	rcall	.+36     	; 0x58 <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	8f ed       	ldi	r24, 0xDF	; 223
  36:	9e e2       	ldi	r25, 0x2E	; 46
  38:	01 97       	sbiw	r24, 0x01	; 1
  3a:	f1 f7       	brne	.-4      	; 0x38 <main+0x6>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <__SP_L__+0x1>
  3e:	00 00       	nop
	uint8_t i = 65;
  40:	81 e4       	ldi	r24, 0x41	; 65
	_delay_ms(5);
	while (1)
	{


		uart_send(i++);
  42:	c1 e0       	ldi	r28, 0x01	; 1
  44:	c8 0f       	add	r28, r24
  46:	1c d0       	rcall	.+56     	; 0x80 <uart_send>
  48:	8f eb       	ldi	r24, 0xBF	; 191
  4a:	92 e1       	ldi	r25, 0x12	; 18
  4c:	01 97       	sbiw	r24, 0x01	; 1
  4e:	f1 f7       	brne	.-4      	; 0x4c <__DATA_REGION_LENGTH__+0xc>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__DATA_REGION_LENGTH__+0x12>
  52:	00 00       	nop
  54:	8c 2f       	mov	r24, r28
  56:	f5 cf       	rjmp	.-22     	; 0x42 <__DATA_REGION_LENGTH__+0x2>

00000058 <uart_init>:

int8_t BAUD_DIV,//отступ отсчета для таймера
		send_flag;//флаг начала передачи

void uart_init(){
	BAUD_DIV = 256 - F_CPU/DIV/BAUD_RATE;
  58:	83 e8       	ldi	r24, 0x83	; 131
  5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <BAUD_DIV>
	TIMSK0 |= 1 << TOIE0;//разрешение прерываний по переполнению
  5e:	89 b7       	in	r24, 0x39	; 57
  60:	82 60       	ori	r24, 0x02	; 2
  62:	89 bf       	out	0x39, r24	; 57
	TCCR0B |= 1 << CS01;// предделитель 8
  64:	83 b7       	in	r24, 0x33	; 51
  66:	82 60       	ori	r24, 0x02	; 2
  68:	83 bf       	out	0x33, r24	; 51
	TCNT0 = BAUD_DIV;//двигаем счетчик
  6a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BAUD_DIV>
  6e:	82 bf       	out	0x32, r24	; 50
	txByte = 0xFF;//заполнение буфера единичками
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	DDRB |= 1 << TXPORT;//выставляем линию ТХ на выход
  76:	87 b3       	in	r24, 0x17	; 23
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	87 bb       	out	0x17, r24	; 23
	sei();//разрешаем глобальные прерывания
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <uart_send>:
}

void uart_send(uint8_t byte){
	PORTB &= ~(1 << TXPORT);//опускаем в ноль уровень сигнала на линии передачи. Начинаем отправку.
  80:	98 b3       	in	r25, 0x18	; 24
  82:	9e 7f       	andi	r25, 0xFE	; 254
  84:	98 bb       	out	0x18, r25	; 24
	TCNT0 = BAUD_DIV;//двигаем счетчик
  86:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <BAUD_DIV>
  8a:	92 bf       	out	0x32, r25	; 50
	txByte = byte;//отправляем в буфер байт
  8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	08 95       	ret

00000092 <__vector_3>:
}

ISR(TIM0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	PORTB = ((txByte & 0x01) << TXPORT);//присваиваем уровень сигнала равным младшему биту в буфере
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	88 bb       	out	0x18, r24	; 24
	txByte = txByte >> 1;//затираем отправленный бит
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	86 95       	lsr	r24
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	txByte |= 1<< 7;//записываем в старший бит 1
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TCNT0 = BAUD_DIV;//двигаем счетчик
  ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BAUD_DIV>
  be:	82 bf       	out	0x32, r24	; 50
		
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
