
attiny13_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000775  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042f  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b6  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	85 d0       	rcall	.+266    	; 0x128 <main>
  1e:	93 c0       	rjmp	.+294    	; 0x146 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <SET_LOW>:
	SET_HIGH(SDA_pin);
	SET_HIGH(SCL_pin);
}

void SET_LOW(uint8_t pin_num){
	PORTB &= ~(1 << pin_num);
  22:	98 b3       	in	r25, 0x18	; 24
  24:	21 e0       	ldi	r18, 0x01	; 1
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	02 c0       	rjmp	.+4      	; 0x2e <SET_LOW+0xc>
  2a:	22 0f       	add	r18, r18
  2c:	33 1f       	adc	r19, r19
  2e:	8a 95       	dec	r24
  30:	e2 f7       	brpl	.-8      	; 0x2a <SET_LOW+0x8>
  32:	20 95       	com	r18
  34:	29 23       	and	r18, r25
  36:	28 bb       	out	0x18, r18	; 24
  38:	08 95       	ret

0000003a <SET_HIGH>:
}

void SET_HIGH(uint8_t pin_num){
	PORTB |= (1 << pin_num);
  3a:	98 b3       	in	r25, 0x18	; 24
  3c:	21 e0       	ldi	r18, 0x01	; 1
  3e:	30 e0       	ldi	r19, 0x00	; 0
  40:	02 c0       	rjmp	.+4      	; 0x46 <__DATA_REGION_LENGTH__+0x6>
  42:	22 0f       	add	r18, r18
  44:	33 1f       	adc	r19, r19
  46:	8a 95       	dec	r24
  48:	e2 f7       	brpl	.-8      	; 0x42 <__DATA_REGION_LENGTH__+0x2>
  4a:	29 2b       	or	r18, r25
  4c:	28 bb       	out	0x18, r18	; 24
  4e:	08 95       	ret

00000050 <init_i2c>:
#define SDA_pin 1
#define WAIT _delay_ms(10);


void init_i2c(){
	DDRB |= (1 << SDA_pin) | (1 << SCL_pin);
  50:	87 b3       	in	r24, 0x17	; 23
  52:	83 60       	ori	r24, 0x03	; 3
  54:	87 bb       	out	0x17, r24	; 23
	SET_HIGH(SDA_pin);
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	ef df       	rcall	.-34     	; 0x3a <SET_HIGH>
	SET_HIGH(SCL_pin);
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	ec df       	rcall	.-40     	; 0x3a <SET_HIGH>
  62:	08 95       	ret

00000064 <start_transmit>:
void SET_HIGH(uint8_t pin_num){
	PORTB |= (1 << pin_num);
}

void start_transmit(){
	SET_LOW(SDA_pin);
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	dd df       	rcall	.-70     	; 0x22 <SET_LOW>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	8f eb       	ldi	r24, 0xBF	; 191
  6a:	9d e5       	ldi	r25, 0x5D	; 93
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <start_transmit+0x8>
  70:	00 c0       	rjmp	.+0      	; 0x72 <start_transmit+0xe>
  72:	00 00       	nop
	WAIT;
	SET_LOW(SCL_pin);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	d5 df       	rcall	.-86     	; 0x22 <SET_LOW>
  78:	08 95       	ret

0000007a <stop_transmit>:
}
void stop_transmit(){
	SET_LOW(SDA_pin);
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	d2 df       	rcall	.-92     	; 0x22 <SET_LOW>
  7e:	8f eb       	ldi	r24, 0xBF	; 191
  80:	9d e5       	ldi	r25, 0x5D	; 93
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <stop_transmit+0x8>
  86:	00 c0       	rjmp	.+0      	; 0x88 <stop_transmit+0xe>
  88:	00 00       	nop
	WAIT;
	SET_HIGH(SCL_pin);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	d6 df       	rcall	.-84     	; 0x3a <SET_HIGH>
  8e:	8f eb       	ldi	r24, 0xBF	; 191
  90:	9d e5       	ldi	r25, 0x5D	; 93
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <stop_transmit+0x18>
  96:	00 c0       	rjmp	.+0      	; 0x98 <stop_transmit+0x1e>
  98:	00 00       	nop
	WAIT;
	SET_HIGH(SDA_pin);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	ce df       	rcall	.-100    	; 0x3a <SET_HIGH>
  9e:	08 95       	ret

000000a0 <send_byte>:
}

uint8_t send_byte(uint8_t byte){
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	18 2f       	mov	r17, r24
	int i = 8;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	90 e0       	ldi	r25, 0x00	; 0
	while(i--){
  ac:	20 c0       	rjmp	.+64     	; 0xee <send_byte+0x4e>
		if(byte & 1 << i) SET_HIGH(SDA_pin);
  ae:	81 2f       	mov	r24, r17
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0c 2e       	mov	r0, r28
  b4:	02 c0       	rjmp	.+4      	; 0xba <send_byte+0x1a>
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <send_byte+0x16>
  be:	80 ff       	sbrs	r24, 0
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <send_byte+0x28>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	ba df       	rcall	.-140    	; 0x3a <SET_HIGH>
  c6:	02 c0       	rjmp	.+4      	; 0xcc <send_byte+0x2c>
		else SET_LOW(SDA_pin);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	ab df       	rcall	.-170    	; 0x22 <SET_LOW>
  cc:	8f eb       	ldi	r24, 0xBF	; 191
  ce:	9d e5       	ldi	r25, 0x5D	; 93
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <send_byte+0x30>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <send_byte+0x36>
  d6:	00 00       	nop
		WAIT;
		SET_HIGH(SCL_pin);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	af df       	rcall	.-162    	; 0x3a <SET_HIGH>
  dc:	8f eb       	ldi	r24, 0xBF	; 191
  de:	9d e5       	ldi	r25, 0x5D	; 93
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <send_byte+0x40>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <send_byte+0x46>
  e6:	00 00       	nop
		WAIT;
		SET_LOW(SCL_pin);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	9b df       	rcall	.-202    	; 0x22 <SET_LOW>
	SET_HIGH(SDA_pin);
}

uint8_t send_byte(uint8_t byte){
	int i = 8;
	while(i--){
  ec:	ce 01       	movw	r24, r28
  ee:	ec 01       	movw	r28, r24
  f0:	21 97       	sbiw	r28, 0x01	; 1
  f2:	89 2b       	or	r24, r25
  f4:	e1 f6       	brne	.-72     	; 0xae <send_byte+0xe>
		WAIT;
		SET_HIGH(SCL_pin);
		WAIT;
		SET_LOW(SCL_pin);
	}
	SET_HIGH(SDA_pin);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	a0 df       	rcall	.-192    	; 0x3a <SET_HIGH>
  fa:	8f eb       	ldi	r24, 0xBF	; 191
  fc:	9d e5       	ldi	r25, 0x5D	; 93
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <send_byte+0x5e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <send_byte+0x64>
 104:	00 00       	nop
	WAIT;
	SET_HIGH(SCL_pin);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	98 df       	rcall	.-208    	; 0x3a <SET_HIGH>
 10a:	8f eb       	ldi	r24, 0xBF	; 191
 10c:	9d e5       	ldi	r25, 0x5D	; 93
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <send_byte+0x6e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <send_byte+0x74>
 114:	00 00       	nop
	WAIT;
	i = (PINB & (1 << SDA_pin));
 116:	c6 b3       	in	r28, 0x16	; 22
	SET_LOW(SCL_pin);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	83 df       	rcall	.-250    	; 0x22 <SET_LOW>
	return i;
	
}
 11c:	8c 2f       	mov	r24, r28
 11e:	82 70       	andi	r24, 0x02	; 2
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	08 95       	ret

00000128 <main>:



int main(void)
{
	init_i2c();
 128:	93 df       	rcall	.-218    	; 0x50 <init_i2c>

    /* Replace with your application code */
    while (1) 
    {
		start_transmit();
 12a:	9c df       	rcall	.-200    	; 0x64 <start_transmit>
		send_byte(0x91);
 12c:	81 e9       	ldi	r24, 0x91	; 145
 12e:	b8 df       	rcall	.-144    	; 0xa0 <send_byte>
		//send_byte(0x41);
		stop_transmit();
 130:	a4 df       	rcall	.-184    	; 0x7a <stop_transmit>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	87 e9       	ldi	r24, 0x97	; 151
 136:	9a e3       	ldi	r25, 0x3A	; 58
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x10>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x1a>
 142:	00 00       	nop
 144:	f2 cf       	rjmp	.-28     	; 0x12a <main+0x2>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
