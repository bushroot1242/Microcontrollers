
tiny13_dht11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064d  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000416  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00000c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cd  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000162  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a8 36       	cpi	r26, 0x68	; 104
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	57 d0       	rcall	.+174    	; 0xdc <main>
  2e:	6f c0       	rjmp	.+222    	; 0x10e <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <LOW>:
#define F_CPU 9600000UL
#include <avr/io.h>
#include "util/delay.h"

void LOW(){
	DDRB|= 1 << PB0;
  32:	87 b3       	in	r24, 0x17	; 23
  34:	81 60       	ori	r24, 0x01	; 1
  36:	87 bb       	out	0x17, r24	; 23
  38:	08 95       	ret

0000003a <HIGH>:
}
void HIGH(){
	DDRB &= ~(1 << PB0);
  3a:	87 b3       	in	r24, 0x17	; 23
  3c:	8e 7f       	andi	r24, 0xFE	; 254
  3e:	87 bb       	out	0x17, r24	; 23
  40:	08 95       	ret

00000042 <readBit>:
}

uint8_t readBit(){
	return PINB & (1 << PB0);
  42:	86 b3       	in	r24, 0x16	; 22
}
  44:	81 70       	andi	r24, 0x01	; 1
  46:	08 95       	ret

00000048 <readByte>:

volatile uint8_t byte = 0, i;
uint8_t readByte(){
	byte = 0;
  48:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	i = 8;
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
	while(i--){
  52:	1a c0       	rjmp	.+52     	; 0x88 <readByte+0x40>
		while(!(readBit()));
  54:	f6 df       	rcall	.-20     	; 0x42 <readBit>
  56:	88 23       	and	r24, r24
  58:	e9 f3       	breq	.-6      	; 0x54 <readByte+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	80 e8       	ldi	r24, 0x80	; 128
  5c:	8a 95       	dec	r24
  5e:	f1 f7       	brne	.-4      	; 0x5c <readByte+0x14>
		_delay_us(40);
		if(readBit()){
  60:	f0 df       	rcall	.-32     	; 0x42 <readBit>
  62:	88 23       	and	r24, r24
  64:	89 f0       	breq	.+34     	; 0x88 <readByte+0x40>
			byte |= (1 << i);
  66:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <i>
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	02 c0       	rjmp	.+4      	; 0x74 <readByte+0x2c>
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	2a 95       	dec	r18
  76:	e2 f7       	brpl	.-8      	; 0x70 <readByte+0x28>
  78:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7c:	89 2b       	or	r24, r25
  7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(readBit());
  82:	df df       	rcall	.-66     	; 0x42 <readBit>
  84:	81 11       	cpse	r24, r1
  86:	fd cf       	rjmp	.-6      	; 0x82 <readByte+0x3a>

volatile uint8_t byte = 0, i;
uint8_t readByte(){
	byte = 0;
	i = 8;
	while(i--){
  88:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
  8c:	9f ef       	ldi	r25, 0xFF	; 255
  8e:	98 0f       	add	r25, r24
  90:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <i>
  94:	81 11       	cpse	r24, r1
  96:	de cf       	rjmp	.-68     	; 0x54 <readByte+0xc>
			byte |= (1 << i);
			while(readBit());
		}
		
	}
	return byte;
  98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  9c:	08 95       	ret

0000009e <start>:

uint8_t start(){
	LOW();
  9e:	c9 df       	rcall	.-110    	; 0x32 <LOW>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e7       	ldi	r24, 0x7F	; 127
  a2:	9b eb       	ldi	r25, 0xBB	; 187
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__stack+0x5>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__stack+0xb>
  aa:	00 00       	nop
	_delay_ms(20);
	HIGH();
  ac:	c6 df       	rcall	.-116    	; 0x3a <HIGH>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	90 e8       	ldi	r25, 0x80	; 128
  b0:	9a 95       	dec	r25
  b2:	f1 f7       	brne	.-4      	; 0xb0 <__stack+0x11>
	_delay_us(40);
	if(readBit())return 1;
  b4:	c6 df       	rcall	.-116    	; 0x42 <readBit>
  b6:	81 11       	cpse	r24, r1
  b8:	0d c0       	rjmp	.+26     	; 0xd4 <__stack+0x35>
  ba:	8f eb       	ldi	r24, 0xBF	; 191
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__stack+0x1f>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__stack+0x25>
  c4:	00 00       	nop
	_delay_us(80);
	if(!(readBit()))return 1;
  c6:	bd df       	rcall	.-134    	; 0x42 <readBit>
  c8:	88 23       	and	r24, r24
  ca:	31 f0       	breq	.+12     	; 0xd8 <__stack+0x39>
	while(readBit());
  cc:	ba df       	rcall	.-140    	; 0x42 <readBit>
  ce:	81 11       	cpse	r24, r1
  d0:	fd cf       	rjmp	.-6      	; 0xcc <__stack+0x2d>
  d2:	08 95       	ret
uint8_t start(){
	LOW();
	_delay_ms(20);
	HIGH();
	_delay_us(40);
	if(readBit())return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
	_delay_us(80);
	if(!(readBit()))return 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
	while(readBit());
	return 0;
	
}
  da:	08 95       	ret

000000dc <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	87 e9       	ldi	r24, 0x97	; 151
  e0:	9a e3       	ldi	r25, 0x3A	; 58
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x6>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x10>
  ec:	00 00       	nop
{

    while (1) 
    {
		_delay_ms(2000);
		 if(!start())
  ee:	d7 df       	rcall	.-82     	; 0x9e <start>
  f0:	81 11       	cpse	r24, r1
  f2:	f4 cf       	rjmp	.-24     	; 0xdc <main>
		 {
			 data[0] = readByte();
  f4:	a9 df       	rcall	.-174    	; 0x48 <readByte>
  f6:	c2 e6       	ldi	r28, 0x62	; 98
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	88 83       	st	Y, r24
			 data[1] = readByte();
  fc:	a5 df       	rcall	.-182    	; 0x48 <readByte>
  fe:	89 83       	std	Y+1, r24	; 0x01
			 data[2] = readByte();
 100:	a3 df       	rcall	.-186    	; 0x48 <readByte>
 102:	8a 83       	std	Y+2, r24	; 0x02
			 data[3] = readByte();
 104:	a1 df       	rcall	.-190    	; 0x48 <readByte>
 106:	8b 83       	std	Y+3, r24	; 0x03
			 data[4] = readByte();
 108:	9f df       	rcall	.-194    	; 0x48 <readByte>
 10a:	8c 83       	std	Y+4, r24	; 0x04
 10c:	e7 cf       	rjmp	.-50     	; 0xdc <main>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
